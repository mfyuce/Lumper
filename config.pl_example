
our $YTUrl='http://mycompany.myjetbrains.com/youtrack';
our $YTlogin='mylogin@yourcompany.com';
our $YTpassword='mypass';
# Url and credentials to access Jira
our $JiraUrl='https://mycompany.atlassian.net';
our $JiraLogin='mylogin';
our $JiraPassword='mypass';
# The project to migrate from
our $YTProject='FROM_SHORT_PROJECT_KEY';
# The project to migrate to
our $JiraProject='TO_SHORT_PROJECT_KEY';

# Export tags from YT and import them as labels in Jira
our $exportTags='true';
# This is quite obvious
our $exportAttachments='true';
our $exportLinks='true';

# Lumper will keep the issue keys identical in YT and Jira if YT has no gaps larger than this value
# Be sure giving delete permission to your account
our $maximumKeyGap=100;

# Issue type mapping
our %Type = (
	'Bug' => 'Bug',
	'Task' => 'Task',
	'Cosmetics' => 'Task',
	'Exception' => 'Bug',
	'Feature' => 'Task',
	'Usability Problem' => 'Bug',
	'Epic' => 'Task',
	'Performance Problem' => 'Bug'
);

# Issue priority mapping
our %Priority = (
	'Minor' => 'Lowest',
	'Normal' => 'Low',
	'Major' => 'Medium',
	'Critical' => 'High',
	'Show-stopper' => 'Highest'
);

# Issue status mapping
# By default the Status will remain Opened
# From Jira side there should be Transitions (not Statuses) and all Transitions should be available from the initial state
our %Status = (
	"In Progress" => "In Progress",
	"Can't Reproduce" => "Done",
	"Duplicate" => "Done",
	"Fixed" => "Done",
	"Won't fix" => "Done",
	"Incomplete" => "Done",
	"Obsolete" => "Done",
	"Verified" => "To Do",
	"On Hold" => "To Do",
	"To Plan" => "To Do",
	"Submitted" => "To Do",
	"Open" => "To Do",
	"To be discussed" => "To Do",
	"Reopened" => "To Do",
	"Done" => "Done",
	"Approved to go live" => "To Do",
	"Won't fix" => "Done"
);

# Some statuses in YT can be mapped to Resolutions in Jira
# In order to use this feature a field Resolution should be added to screens (and removed after the migration if not needed)
our %StatusToResolution = (
	"In Progress" => "In Progress",
	"Can't Reproduce" => "Done",
	"Duplicate" => "Done",
	"Fixed" => "Done",
	"Won't fix" => "Done",
	"Incomplete" => "Done",
	"Obsolete" => "Done",
	"Verified" => "To Do",
	"On Hold" => "To Do",
	"To Plan" => "To Do",
	"Submitted" => "To Do",
	"Open" => "To Do",
	"To be discussed" => "To Do",
	"Reopened" => "To Do",
	"Done" => "Done",
	"Approved to go live" => "To Do",
	"Won't fix" => "Done"
);
our %StatusToResolution = (
	"In Progress" => "Unresolved",
	"Can't Reproduce" => "Done",
	"Duplicate" => "Done",
	"Fixed" => "Done",
	"Won't fix" => "Done",
	"Incomplete" => "Done",
	"Obsolete" => "Done",
	"Verified" => "Unresolved",
	"On Hold" => "Unresolved",
	"To Plan" => "Unresolved",
	"Submitted" => "Unresolved",
	"Open" => "Unresolved",
	"To be discussed" => "Unresolved",
	"Reopened" => "Unresolved",
	"Done" => "Done",
	"Approved to go live" => "Unresolved",
	"Won't fix" => "Done"
);
# Custom fields mapping
our %CustomFields = (
	"Found in Version" => "Affects Version/s",
	"Found in build" => "Found in build",
	"Target version" => "Fix Version/s",
	"Fixed in build" => "Fixed in build",
	"Source" => "Source"
);

# Issue link types mapping
our %IssueLinks = (
	"Relates" => "Relates",
	"Duplicate" => "Duplicate",
	"Depend" => "Blocks",
	"Subtask" => "Relates",
	"blocked" => "Blocks"
);

# User mapping. By default the username stays the same
our %User = (
	'john.doe' => 'jdoe',
	'foo' => 'bar'
);

# This hash is optional and needed to restore the comments from appropriate users. If the user is absent then his
# comments will be restored from $JiraUser and the original user will be mentioned in the comment body
our %JiraPasswords = (
	'jdoe' => 'passofjdoe',
	'bar' => 'passofbar',
	'onemoreuser' => 'onemorepass'
);
